import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import os
import subprocess
from config import stdev_hot_treshold, stdev_very_successful_treshold, reels_input_data, update_accounts

st.write("### üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
default_accounts = ",".join(reels_input_data["username"])
accounts_input = st.text_input(
    "–í–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
    value=default_accounts,
    help="–ù–∞–ø—Ä–∏–º–µ—Ä: account1,account2,account3"
)

# –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å—Ç–æ–≤
posts_limit = st.slider(
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
    min_value=1,
    max_value=500,
    value=reels_input_data["resultsLimit"],
    help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
if st.button("üöÄ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", help="–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"):
    if accounts_input:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        accounts_list = [acc.strip() for acc in accounts_input.split(",") if acc.strip()]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        st.write("üéØ –ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", ", ".join(accounts_list))
        st.write("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", posts_limit)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        update_accounts(accounts_list, posts_limit)
        
        # –°–æ–∑–¥–∞–µ–º placeholder –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_placeholder = st.empty()
        loading_placeholder.info(f"‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(accounts_list)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–ø–æ {posts_limit} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤)...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–ø–µ—Ä
            result = subprocess.run(["python", "inst_reel_scraper.py"], 
                                 check=True, 
                                 capture_output=True, 
                                 text=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
            loading_placeholder.info("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            stat_result = subprocess.run(["python", "external_analysis/descriptive_stat.py"],
                                      check=True,
                                      capture_output=True,
                                      text=True)
            
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_placeholder.empty()
            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            st.rerun()
            
        except subprocess.CalledProcessError as e:
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            loading_placeholder.empty()
            error_output = e.stderr if e.stderr else str(e)
            if "Monthly usage hard limit exceeded" in error_output:
                st.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API Apify. " +
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏.")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {error_output}")
    else:
        st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

st.divider()

# Try to load data file, fallback to sample data if not found
try:
    described_path = 'raw_data/described_data.csv'
    sample_path = 'raw_data/sample_data.csv'

    # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å described_data.csv, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(described_path):
        reels_csv_path = 'raw_data/reels.csv'
        if os.path.exists(reels_csv_path):
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –ª–µ—Ç—É
                from external_analysis.descriptive_stat import process_data
                process_data()
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å described_data.csv –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")

    # –ü–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if os.path.exists(described_path):
        df = pd.read_csv(described_path)
    elif os.path.exists(sample_path):
        df = pd.read_csv(sample_path)
        st.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∫–∞–∫ described_data.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        raise FileNotFoundError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–∞–∫ described_data.csv, —Ç–∞–∫ –∏ sample_data.csv")

    # Ensure df is a DataFrame and sort by timestamp
    if isinstance(df, pd.DataFrame):
        df = df.sort_values(by='timestamp', ascending=False)
    else:
        st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è DataFrame.")
        st.stop()
except FileNotFoundError:
    st.error("‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª raw_data/sample_data.csv —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    st.stop()

# –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
selected_account = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
    options=df['accountName'].unique(),
    help="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
)
filtered_df = df[df['accountName'] == selected_account]
st.divider()

tab1, tab2, tab3 = st.tabs(["üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìä –ú–µ—Ç—Ä–∏–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ", "üìπ –í–∏–¥–µ–æ"])
with tab1:
    st.subheader(f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {selected_account}")
    
    # –ë–ª–æ–∫ "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"
    st.write("**–ü—Ä–æ—Å–º–æ—Ç—Ä—ã:**")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö
    views_data = filtered_df['videoPlayCount'].dropna()
    
    if len(views_data) > 0:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", f"{views_data.sum():,.0f}")
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", f"{views_data.mean():,.1f}")
        
        with col2:
            st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{views_data.median():,.1f}")
            st.metric("–ú–∏–Ω–∏–º—É–º", f"{views_data.min():,.0f}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{views_data.max():,.0f}")
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –¥–∞—Ç–µ
        st.write("**–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:**")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        fig_views = px.line(
            filtered_df.sort_values('timestamp'),
            x='timestamp',
            y='videoPlayCount',
            title=f"–ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account}",
            markers=True
        )
        
        fig_views.update_traces(
            line=dict(color='rgb(31, 119, 180)'),
            marker=dict(color='white', size=8, line=dict(width=2, color='rgb(31, 119, 180)'))
        )
        
        fig_views.update_layout(
            xaxis=dict(
                rangeselector=dict(
                    buttons=[
                        dict(step="all", label="–í—Å–µ"),
                        dict(count=30, label="30–¥", step="day", stepmode="backward"),
                        dict(count=60, label="60–¥", step="day", stepmode="backward"),
                        dict(count=90, label="90–¥", step="day", stepmode="backward"),
                        dict(count=180, label="180–¥", step="day", stepmode="backward")
                    ]
                ),
            ),
            yaxis=dict(autorange=True)
        )
        
        st.plotly_chart(fig_views, use_container_width=True)
        
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞—Ö")
    
    st.divider()
    
    # –ë–ª–æ–∫ "–õ–∞–π–∫–∏"
    st.write("**–õ–∞–π–∫–∏:**")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–∞–π–∫–∞—Ö
    likes_data = filtered_df['likesCount'].dropna()
    views_data_for_rate = filtered_df['videoPlayCount'].dropna()
    
    if len(likes_data) > 0:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ª–∞–π–∫–æ–≤
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤", f"{likes_data.sum():,.0f}")
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤", f"{likes_data.mean():,.1f}")
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º LikeRate
            total_likes = likes_data.sum()
            total_views = views_data_for_rate.sum()
            like_rate = (total_likes / total_views * 100) if total_views > 0 else 0
            st.metric("LikeRate (–ª–∞–π–∫–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä—ã)", f"{like_rate:.2f}%")
        
        with col2:
            st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{likes_data.median():,.1f}")
            st.metric("–ú–∏–Ω–∏–º—É–º", f"{likes_data.min():,.0f}")
            st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{likes_data.max():,.0f}")
        
        # –ì—Ä–∞—Ñ–∏–∫ –ª–∞–π–∫–æ–≤ –ø–æ –¥–∞—Ç–µ
        st.write("**–ì—Ä–∞—Ñ–∏–∫ –ª–∞–π–∫–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:**")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ª–∞–π–∫–æ–≤
        fig_likes = px.line(
            filtered_df.sort_values('timestamp'),
            x='timestamp',
            y='likesCount',
            title=f"–õ–∞–π–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account}",
            markers=True
        )
        
        fig_likes.update_traces(
            line=dict(color='rgb(220, 53, 69)'),
            marker=dict(color='white', size=8, line=dict(width=2, color='rgb(220, 53, 69)'))
        )
        
        fig_likes.update_layout(
            xaxis=dict(
                rangeselector=dict(
                    buttons=[
                        dict(step="all", label="–í—Å–µ"),
                        dict(count=30, label="30–¥", step="day", stepmode="backward"),
                        dict(count=60, label="60–¥", step="day", stepmode="backward"),
                        dict(count=90, label="90–¥", step="day", stepmode="backward"),
                        dict(count=180, label="180–¥", step="day", stepmode="backward")
                    ]
                ),
            ),
            yaxis=dict(autorange=True)
        )
        
        st.plotly_chart(fig_likes, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ LikeRate –ø–æ –¥–∞—Ç–µ
        st.write("**–ì—Ä–∞—Ñ–∏–∫ LikeRate –ø–æ –≤—Ä–µ–º–µ–Ω–∏:**")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É likeRate (—É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100 –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤)
        filtered_df_with_rate = filtered_df.copy()
        filtered_df_with_rate['likeRatePercent'] = filtered_df_with_rate['likeRate'] * 100
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ LikeRate
        fig_like_rate = px.line(
            filtered_df_with_rate.sort_values('timestamp'),
            x='timestamp',
            y='likeRatePercent',
            title=f"LikeRate –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account}",
            markers=True
        )
        
        fig_like_rate.update_traces(
            line=dict(color='rgb(255, 193, 7)'),
            marker=dict(color='white', size=8, line=dict(width=2, color='rgb(255, 193, 7)'))
        )
        
        fig_like_rate.update_layout(
            xaxis=dict(
                rangeselector=dict(
                    buttons=[
                        dict(step="all", label="–í—Å–µ"),
                        dict(count=30, label="30–¥", step="day", stepmode="backward"),
                        dict(count=60, label="60–¥", step="day", stepmode="backward"),
                        dict(count=90, label="90–¥", step="day", stepmode="backward"),
                        dict(count=180, label="180–¥", step="day", stepmode="backward")
                    ]
                ),
            ),
            yaxis=dict(autorange=True, title="LikeRate (%)")
        )
        
        st.plotly_chart(fig_like_rate, use_container_width=True)
        
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª–∞–π–∫–∞—Ö")
    
    st.divider()
    
    # –ë–ª–æ–∫ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"
    st.write("**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:**")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
    comments_data = filtered_df['commentsCount'].dropna()
    views_data_for_comment_rate = filtered_df['videoPlayCount'].dropna()
    likes_data_for_like_comment_rate = filtered_df['likesCount'].dropna()
    
    if len(comments_data) > 0:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", f"{comments_data.sum():,.0f}")
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", f"{comments_data.mean():,.1f}")
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º CommentRate
            total_comments = comments_data.sum()
            total_views = views_data_for_comment_rate.sum()
            comment_rate = (total_comments / total_views * 100) if total_views > 0 else 0
            st.metric("CommentRate (–∫–æ–º–º–µ–Ω—Ç—ã/–ø—Ä–æ—Å–º–æ—Ç—Ä—ã)", f"{comment_rate:.2f}%")
        
        with col2:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Like-CommentRate (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–ª–∞–π–∫–∏)
            total_likes = likes_data_for_like_comment_rate.sum()
            like_comment_rate = (total_comments / total_likes * 100) if total_likes > 0 else 0
            st.metric("Like-CommentRate (–∫–æ–º–º–µ–Ω—Ç—ã/–ª–∞–π–∫–∏)", f"{like_comment_rate:.2f}%")
            st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{comments_data.median():,.1f}")
            st.metric("–ú–∏–Ω–∏–º—É–º", f"{comments_data.min():,.0f}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{comments_data.max():,.0f}")
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –¥–∞—Ç–µ
        st.write("**–ì—Ä–∞—Ñ–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏:**")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        fig_comments = px.line(
            filtered_df.sort_values('timestamp'),
            x='timestamp',
            y='commentsCount',
            title=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account}",
            markers=True
        )
        
        fig_comments.update_traces(
            line=dict(color='rgb(40, 167, 69)'),
            marker=dict(color='white', size=8, line=dict(width=2, color='rgb(40, 167, 69)'))
        )
        
        fig_comments.update_layout(
            xaxis=dict(
                rangeselector=dict(
                    buttons=[
                        dict(step="all", label="–í—Å–µ"),
                        dict(count=30, label="30–¥", step="day", stepmode="backward"),
                        dict(count=60, label="60–¥", step="day", stepmode="backward"),
                        dict(count=90, label="90–¥", step="day", stepmode="backward"),
                        dict(count=180, label="180–¥", step="day", stepmode="backward")
                    ]
                ),
            ),
            yaxis=dict(autorange=True)
        )
        
        st.plotly_chart(fig_comments, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ CommentRate –ø–æ –¥–∞—Ç–µ
        st.write("**–ì—Ä–∞—Ñ–∏–∫ CommentRate –ø–æ –≤—Ä–µ–º–µ–Ω–∏:**")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É commentRate (—É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100 –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤)
        filtered_df_with_comment_rate = filtered_df.copy()
        filtered_df_with_comment_rate['commentRatePercent'] = filtered_df_with_comment_rate['commentRate'] * 100
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ CommentRate
        fig_comment_rate = px.line(
            filtered_df_with_comment_rate.sort_values('timestamp'),
            x='timestamp',
            y='commentRatePercent',
            title=f"CommentRate –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account}",
            markers=True
        )
        
        fig_comment_rate.update_traces(
            line=dict(color='rgb(108, 117, 125)'),
            marker=dict(color='white', size=8, line=dict(width=2, color='rgb(108, 117, 125)'))
        )
        
        fig_comment_rate.update_layout(
            xaxis=dict(
                rangeselector=dict(
                    buttons=[
                        dict(step="all", label="–í—Å–µ"),
                        dict(count=30, label="30–¥", step="day", stepmode="backward"),
                        dict(count=60, label="60–¥", step="day", stepmode="backward"),
                        dict(count=90, label="90–¥", step="day", stepmode="backward"),
                        dict(count=180, label="180–¥", step="day", stepmode="backward")
                    ]
                ),
            ),
            yaxis=dict(autorange=True, title="CommentRate (%)")
        )
        
        st.plotly_chart(fig_comment_rate, use_container_width=True)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Like-CommentRate –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–ª–∞–π–∫–∏)
        filtered_df_with_like_comment_rate = filtered_df.copy()
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        def safe_comment_rate_calculation(row):
            likes = row['likesCount']
            comments = row['commentsCount']
            
            # –ï—Å–ª–∏ –ª–∞–π–∫–æ–≤ –º–µ–Ω—å—à–µ 5, —Å—á–∏—Ç–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–º
            if likes < 5:
                return 0  # –∏–ª–∏ np.nan –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            
            ratio = (comments / likes) * 100
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–æ 200%
            # (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ä–µ–¥–∫–æ –ø—Ä–µ–≤—ã—à–∞—é—Ç 50% –æ—Ç –ª–∞–π–∫–æ–≤)
            return min(ratio, 200)
        
        filtered_df_with_like_comment_rate['likeCommentRatePercent'] = filtered_df_with_like_comment_rate.apply(
            safe_comment_rate_calculation, axis=1
        )
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ Like-CommentRate
        fig_like_comment_rate = px.line(
            filtered_df_with_like_comment_rate.sort_values('timestamp'),
            x='timestamp',
            y='likeCommentRatePercent',
            title=f"Like-CommentRate –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account}",
            markers=True
        )
        
        fig_like_comment_rate.update_traces(
            line=dict(color='rgb(153, 102, 255)'),
            marker=dict(color='white', size=8, line=dict(width=2, color='rgb(153, 102, 255)'))
        )
        
        fig_like_comment_rate.update_layout(
            xaxis=dict(
                rangeselector=dict(
                    buttons=[
                        dict(step="all", label="–í—Å–µ"),
                        dict(count=30, label="30–¥", step="day", stepmode="backward"),
                        dict(count=60, label="60–¥", step="day", stepmode="backward"),
                        dict(count=90, label="90–¥", step="day", stepmode="backward"),
                        dict(count=180, label="180–¥", step="day", stepmode="backward")
                    ]
                ),
            ),
            yaxis=dict(autorange=True, title="Like-CommentRate (%)")
        )
        
        st.plotly_chart(fig_like_comment_rate, use_container_width=True)
        
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö")

with tab2:
    metrics_for_plot = ['likesCount', 'commentsCount', 'videoPlayCount']
    selected_metric = st.selectbox("–í—ã–±–µ—Ä–∏ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞", metrics_for_plot)
    st.markdown("<br>", unsafe_allow_html=True)

    st.subheader(f"–ì—Ä–∞—Ñ–∏–∫ –ø–æ {selected_metric}")

    fig = px.line(
        filtered_df.sort_values('timestamp'),
        x='timestamp',
        y=selected_metric,
        title=f"{selected_metric} –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {selected_account}",
        markers=True
    )

    # –ö—Ä–∞—Å–∏–≤—ã–π –≥–ª—É–±–æ–∫–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ —Å –∫—Ä–∞—Å–Ω–æ–π –ª–∏–Ω–∏–µ–π
    fig.update_traces(
        line=dict(color='rgb(102, 51, 153)'),  # –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –≥–ª—É–±–æ–∫–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        marker=dict(color='white', size=8, line=dict(width=2, color='rgb(102, 51, 153)'))
    )

    fig.update_layout(
        xaxis=dict(
            rangeselector=dict(
                buttons=[
                    dict(step="all", label="–í—Å–µ"),
                    dict(count=30, label="30–¥", step="day", stepmode="backward"),
                    dict(count=60, label="60–¥", step="day", stepmode="backward"),
                    dict(count=90, label="90–¥", step="day", stepmode="backward"),
                    dict(count=180, label="180–¥", step="day", stepmode="backward")
                ]
            ),
        ),
        yaxis=dict(autorange=True)  # ‚úÖ –ê–≤—Ç–æ–ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ Y –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –∫—Ä–∞—Å–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞ —É—Ä–æ–≤–Ω–µ Œº + stdev_hot_threshold * œÉ
    metric_data = filtered_df[selected_metric].dropna()
    if len(metric_data) > 0:
        # –ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è HOT –ø–æ—Ä–æ–≥–∞
        hot_threshold_value = metric_data.mean() + stdev_hot_treshold * metric_data.std()
        fig.add_hline(
            y=hot_threshold_value,
            line_dash="dash",
            line_color="red",
            line_width=2,
            annotation_text=f"HOT –ø–æ—Ä–æ–≥: Œº+{stdev_hot_treshold}œÉ = {hot_threshold_value:,.0f}",
            annotation_position="top left"
        )
        
        # –ó–µ–ª–µ–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è VERY SUCCESSFUL –ø–æ—Ä–æ–≥–∞
        very_successful_threshold_value = metric_data.mean() + stdev_very_successful_treshold * metric_data.std()
        fig.add_hline(
            y=very_successful_threshold_value,
            line_dash="dash",
            line_color="green",
            line_width=2,
            annotation_text=f"‚úÖ Very Successful: Œº+{stdev_very_successful_treshold}œÉ = {very_successful_threshold_value:,.0f}",
            annotation_position="bottom left"
        )

    st.plotly_chart(fig, use_container_width=True)
    st.divider()

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    st.subheader(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {selected_metric}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
    metric_data = filtered_df[selected_metric].dropna()
    
    if len(metric_data) > 0:
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        st.write("**–ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**")
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{metric_data.sum():,.0f}")
            st.metric("–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", f"{metric_data.mean():,.1f}")
            st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{metric_data.max():,.0f}")
            st.metric("–ú–∏–Ω–∏–º—É–º", f"{metric_data.min():,.0f}")
            
        
        with col2:
            st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{metric_data.median():,.1f}")
            total_video_play_count = filtered_df['videoPlayCount'].sum()
            ratio_to_total_views = (metric_data.sum() / total_video_play_count * 100) if total_video_play_count > 0 else 0
            st.metric("–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –æ–±—â–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º", f"{ratio_to_total_views:.2f}%")
            st.metric("–ú–∞–∫—Å–∏–º—É–º", f"{metric_data.max():,.0f}")

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Å–ø–æ–π–ª–µ—Ä–µ
        with st.expander("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"):
            st.markdown("<br>", unsafe_allow_html=True)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–±—Ä–æ—Å—ã
            st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–±—Ä–æ—Å—ã:**")
            
            q1 = metric_data.quantile(0.25)
            q3 = metric_data.quantile(0.75)
            iqr = q3 - q1
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("HOT-–≥—Ä–∞–Ω–∏—Ü–∞ (Œº+2œÉ)", f"{metric_data.mean() + stdev_hot_treshold * metric_data.std():,.1f}")
                st.metric("COLD-–≥—Ä–∞–Ω–∏—Ü–∞ (Œº-2œÉ)", f"{metric_data.mean() - 2 * metric_data.std():,.1f}")
                st.metric("–ú–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö (IQR)", f"{iqr:,.1f}")
            
            with col2:
                st.metric("Upper fence (Q3+1.5*IQR)", f"{q3 + 1.5 * iqr:,.1f}")
                st.metric("Lower fence (Q1-1.5*IQR)", f"{q1 - 1.5 * iqr:,.1f}")
            st.divider()

            # –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏
            st.write("**–ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏:**")
            percentiles = [99, 90, 75, 50, 25, 10, 5]
            percentile_values = {p: metric_data.quantile(p/100) for p in percentiles}
            
            col1, col2, col3 = st.columns(3)
            for i, p in enumerate(percentiles):
                with [col1, col2, col3][i % 3]:
                    st.metric(f"{p}-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å", f"{percentile_values[p]:,.1f}")
            st.divider()
            
            # –°—É–º–º–∞ –º–µ—Ç—Ä–∏–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π
            st.write(f"**–°—É–º–º–∞ {selected_metric} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π:**")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π
            percentile_ranges = [
                (100, 99, "100-99"),
                (99, 90, "99-90"),
                (90, 75, "90-75"),
                (75, 50, "75-50"),
                (50, 25, "50-25"),
                (25, 10, "25-10"),
                (10, 5, "10-5"),
                (5, 0, "5-0")
            ]
            
            total_sum = metric_data.sum()
            
            col1, col2 = st.columns(2)
            for i, (upper_p, lower_p, label) in enumerate(percentile_ranges):
                if upper_p == 100:
                    upper_val = metric_data.max()
                else:
                    upper_val = percentile_values[upper_p]
                
                if lower_p == 0:
                    lower_val = metric_data.min()
                else:
                    lower_val = percentile_values[lower_p]
                
                range_sum = metric_data[(metric_data >= lower_val) & (metric_data <= upper_val)].sum()
                percentage = (range_sum / total_sum * 100) if total_sum > 0 else 0
                
                with [col1, col2][i % 2]:
                    st.metric(f"–î–∏–∞–ø–∞–∑–æ–Ω {label}%", f"{range_sum:,.0f} ({percentage:.1f}%)")
            st.divider()

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ REELS –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π
            st.write("**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ REELS –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π:**")
            
            total_count = len(metric_data)
            
            col1, col2 = st.columns(2)
            for i, (upper_p, lower_p, label) in enumerate(percentile_ranges):
                if upper_p == 100:
                    upper_val = metric_data.max()
                else:
                    upper_val = percentile_values[upper_p]
                
                if lower_p == 0:
                    lower_val = metric_data.min()
                else:
                    lower_val = percentile_values[lower_p]
                
                range_count = len(metric_data[(metric_data >= lower_val) & (metric_data <= upper_val)])
                count_percentage = (range_count / total_count * 100) if total_count > 0 else 0
                
                with [col1, col2][i % 2]:
                    st.metric(f"–î–∏–∞–ø–∞–∑–æ–Ω {label}%", f"{range_count} ({count_percentage:.1f}%)")
            st.divider()
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
            st.write("**–ú–µ—Ç—Ä–∏–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏:**")
            
            coefficient_of_variation = metric_data.std() / metric_data.mean()
            skewness = metric_data.skew()
            kurtosis = metric_data.kurtosis()
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏", f"{coefficient_of_variation:.3f}")
            with col2:
                st.metric("–ê—Å–∏–º–º–µ—Ç—Ä–∏—è (skewness)", f"{skewness:.3f}")
            with col3:
                st.metric("–≠–∫—Å—Ü–µ—Å—Å (kurtosis)", f"{kurtosis:.3f}")
    
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ mark-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        st.subheader("–§–∏–ª—å—Ç—Ä—ã –≤–∏–¥–µ–æ")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π mark-–ø–∞—Ä–∞–º–µ—Ç—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
        mark_columns = {
            'commentsCount': 'markcomments',
            'likesCount': 'marklikes',
            'videoPlayCount': 'markvideoPlay',
            'videoDuration': 'markvideoDuration',
            'engagementRate': 'markengagementR',
            'commentRate': 'markcommentR',
            'likeRate': 'marklikeR',
            'performanceScore': 'markperformanceScore'
        }
        
        mark_column = mark_columns[selected_metric]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        category_options = ['üî•viral hit', '‚úÖvery successful', 'successful', 'average', 'weak']
        
        # –§–∏–ª—å—Ç—Ä —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 'üî•viral hit'
        selected_categories = st.multiselect(
            f"–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({mark_column})",
            options=category_options,
            default=['üî•viral hit']
        )
        
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if selected_categories:
            filtered_videos_df = filtered_df[filtered_df[mark_column].isin(selected_categories)]
        else:
            filtered_videos_df = filtered_df
        
        # –í–∏–¥–µ–æ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        st.divider()
        st.subheader("–í–∏–¥–µ–æ –∫–∞—Ä—Ç–æ—á–∫–∏")
        
        if len(filtered_videos_df) > 0:
            for i in range(0, len(filtered_videos_df), 3):
                cols = st.columns(3)
                for j, col in enumerate(cols):
                    if i + j < len(filtered_videos_df):
                        row = filtered_videos_df.iloc[i + j]
                        with col:
                            st.markdown(f"**üìπ `{row['url']}`**")
                            st.video(row['videoUrl'])
                            st.caption(f"üëÅ {int(row['videoPlayCount'])} | ‚ù§Ô∏è {int(row['likesCount'])} | {row[mark_column]}")
        else:
            st.info("–ù–µ—Ç –≤–∏–¥–µ–æ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
    
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏")
