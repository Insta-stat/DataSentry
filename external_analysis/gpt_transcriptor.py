import os
import csv
import requests
import tempfile
import time
from pathlib import Path
from urllib.parse import urlparse
import openai
from openai import OpenAI
import pandas as pd
from datetime import datetime

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç API –∫–ª—é—á–∞
try:
    from creds.accesses import gpt_api
except ImportError:
    gpt_api = os.getenv('OPENAI_API_KEY')

class GPTTranscriptor:
    def __init__(self, api_key=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞
        
        Args:
            api_key (str): OpenAI API –∫–ª—é—á. –ï—Å–ª–∏ None, –±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ –º–æ–¥—É–ª—è creds –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        """
        self.client = OpenAI(
            api_key=api_key or gpt_api or os.getenv('OPENAI_API_KEY')
        )
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.base_dir = Path(__file__).parent.parent
        self.transcripts_dir = self.base_dir / "transcripts"
        self.temp_dir = self.base_dir / "temp_audio"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self.transcripts_dir.mkdir(exist_ok=True)
        self.temp_dir.mkdir(exist_ok=True)
    
    def extract_video_id_from_url(self, video_url):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑ MP4 URL –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        parsed = urlparse(video_url)
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        filename = Path(parsed.path).stem
        if not filename or filename == '':
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –ø—É—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à URL
            import hashlib
            filename = hashlib.md5(video_url.encode()).hexdigest()[:12]
        return filename
    
    def validate_url(self, url):
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL"""
        try:
            import urllib.parse
            parsed = urllib.parse.urlparse(url)
            return bool(parsed.scheme and parsed.netloc), "URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"
        except:
            return False, "–ù–µ–≤–µ—Ä–Ω—ã–π URL"
    
    def download_mp4(self, url, filepath):
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ MP4 —Ñ–∞–π–ª–∞"""
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
        }
        
        try:
            print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª...")
            response = requests.get(url, headers=headers, timeout=60)
            response.raise_for_status()
            
            with open(filepath, 'wb') as f:
                f.write(response.content)
            
            file_size = len(response.content)
            print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {file_size / 1024 / 1024:.2f}MB")
            
            return file_size > 1000  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 1KB
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def transcribe_audio(self, audio_path):
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ OpenAI Whisper API
        
        Args:
            audio_path (str): –ü—É—Ç—å –∫ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            
        Returns:
            str: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            print(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ...")
            
            with open(audio_path, 'rb') as audio_file:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞)
                response = self.client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file
                )
                text = response.text.strip()
                
                print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                return text
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}")
            return None
    
    def save_transcript(self, video_id, transcript, original_url):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ —Ñ–∞–π–ª"""
        try:
            output_file = self.transcripts_dir / f"{video_id}.txt"
            
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(f"URL: {original_url}\n")
                f.write(f"ID: {video_id}\n")
                f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("-" * 50 + "\n")
                f.write(transcript)
            
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def cleanup_temp_files(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        try:
            for file in self.temp_dir.glob("*"):
                if file.is_file():
                    file.unlink()
            print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")
    
    def process_videos(self, csv_path):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∏–∑ CSV
        
        Args:
            csv_path (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å URL –≤–∏–¥–µ–æ
        """
        try:
            # –ß–∏—Ç–∞–µ–º CSV
            df = pd.read_csv(csv_path)
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ CSV")
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É —Å URL
            url_column = None
            for col in ['videoUrl', 'url', 'video_url', 'mp4_url']:
                if col in df.columns:
                    url_column = col
                    break
            
            if url_column is None:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å URL –≤–∏–¥–µ–æ (videoUrl, url, video_url, mp4_url)")
                return
            
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É: {url_column}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
            processed = 0
            failed = 0
            
            for index, row in df.iterrows():
                url = row[url_column]
                if pd.isna(url):
                    continue
                
                print(f"\nüìπ –í–∏–¥–µ–æ {index + 1}/{len(df)}: {url[:50]}...")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                video_id = self.extract_video_id_from_url(url)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ
                output_file = self.transcripts_dir / f"{video_id}.txt"
                if output_file.exists():
                    print(f"‚è≠Ô∏è –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {output_file}")
                    processed += 1
                    continue
                
                # –°–∫–∞—á–∏–≤–∞–µ–º MP4
                video_path = self.temp_dir / f"{video_id}.mp4"
                if not self.download_mp4(url, video_path):
                    failed += 1
                    continue
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º
                transcript = self.transcribe_audio(str(video_path))
                if not transcript:
                    failed += 1
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.save_transcript(video_id, transcript, url)
                processed += 1
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if video_path.exists():
                    video_path.unlink()
                
            print(f"\nüéØ –ò—Ç–æ–≥–æ: {processed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
            
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            import traceback
            traceback.print_exc()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞"""
    print("üéôÔ∏è –ó–∞–ø—É—Å–∫ GPT Transcriptor –¥–ª—è MP4 —Ñ–∞–π–ª–æ–≤")
    
    try:
        transcriptor = GPTTranscriptor()
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
        script_dir = Path(__file__).parent
        csv_path = script_dir.parent / "input_data" / "videos.csv"
        
        if not csv_path.exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª input_data/videos.csv —Å –∫–æ–ª–æ–Ω–∫–æ–π videoUrl")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {csv_path}")
            transcriptor.process_videos(str(csv_path))
        print("üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
